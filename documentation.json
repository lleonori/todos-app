{
    "pipes": [],
    "interfaces": [
        {
            "name": "Task",
            "id": "interface-Task-0bcca9992b80e6884b02c7f696e71df26da52ae88bbfe829297eb07d6f5042a627fc38b720b0a4d45697a313662c1b03ab525b09251b9f9ad08e2c38cec21ea5",
            "file": "src/app/core/models/a-filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id?: string;\r\n  title?: string;\r\n  state?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "Task",
            "id": "interface-Task-0bcca9992b80e6884b02c7f696e71df26da52ae88bbfe829297eb07d6f5042a627fc38b720b0a4d45697a313662c1b03ab525b09251b9f9ad08e2c38cec21ea5-1",
            "file": "src/app/core/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id?: string;\r\n  title?: string;\r\n  state?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Task-1"
        },
        {
            "name": "TodosInterface",
            "id": "interface-TodosInterface-874c27f7a76ecbf8584847c8a13b844a6dac6f93c4316fa9909c6d63d306e0b7c8b7da199fd6df620f70e87982a4f023592b7152f6fad392cb5eab79bf530108",
            "file": "src/app/core/models/todos.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TodosInterface {\r\n  userId?: number;\r\n  id?: string;\r\n  title: string;\r\n  completed: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TodosService",
            "id": "injectable-TodosService-b00b4f792f303b2fe6aef6a91809064373c6beb41f06d8ade1bdaf73706325326398e10b2db0ba7de6cab291fa38d2b3ed04497e95badb5579c87959c593cd1d",
            "file": "src/app/components/features/services/todos.service.ts",
            "properties": [
                {
                    "name": "filterSig",
                    "defaultValue": "signal<FilterEnum>(FilterEnum.all)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "noTodosClass",
                    "defaultValue": "computed(() => {\n    const todos = this.todosSig();\n    return todos.length === 0;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "todosSig",
                    "defaultValue": "signal<TodosInterface[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "addTodo",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chageFilter",
                    "args": [
                        {
                            "name": "filterName",
                            "type": "FilterEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterName",
                            "type": "FilterEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleAllTodos",
                    "args": [
                        {
                            "name": "isCompleted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isCompleted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, computed, inject, signal } from '@angular/core';\nimport { TodosInterface } from '../../../core/models/todos.model';\nimport { FilterEnum } from '../../../core/enums/enum';\nimport { map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TodosService {\n  // dichiarazione del Signal\n  todosSig = signal<TodosInterface[]>([]);\n  filterSig = signal<FilterEnum>(FilterEnum.all);\n\n  noTodosClass = computed(() => {\n    const todos = this.todosSig();\n    return todos.length === 0;\n  });\n\n  addTodo(text: string): void {\n    const newTodo: TodosInterface = {\n      id: Math.random().toString(16),\n      title: text,\n      completed: false,\n    };\n\n    // update del Signal\n    this.todosSig.update((todos) => [...todos, newTodo]);\n  }\n\n  removeTodo(id: string | undefined): void {\n    // update del Signal\n    this.todosSig.update((todos) => todos.filter((todo) => todo.id !== id));\n  }\n\n  chageFilter(filterName: FilterEnum): void {\n    // tramite set non andiamo a modificare il valore\n    // del signal ma andiamo a sovrascrivere\n    // completamente il valore del nostro signal\n    this.filterSig.set(filterName);\n  }\n\n  changeTodo(id: string | undefined, title: string) {\n    // update del Signal\n    this.todosSig.update((todos) =>\n      todos.map((todo) => (todo.id === id ? { ...todo, title } : todo))\n    );\n  }\n\n  toggleTodo(id: string | undefined) {\n    // update del Signal\n    this.todosSig.update((todos) =>\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  }\n\n  toggleAllTodos(isCompleted: boolean) {\n    // update del Signal\n    this.todosSig.update((todos) =>\n      todos.map((todo) => ({ ...todo, completed: isCompleted }))\n    );\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AFilterComponent",
            "id": "component-AFilterComponent-2aa1943534a9d763e3ef4df648d0e9f8952f554a91ca7562623d8ab4d0ffb07f0f395351b749707682729662ab8b7d54fb54a6acced695ac0f6435b292a5aab7",
            "file": "src/app/components/shared/a-filter/a-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-a-filter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./a-filter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "textFilter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "typeFilter",
                    "defaultValue": "FilterEnum.all",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FilterEnum",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeFilter",
                    "defaultValue": "new EventEmitter<FilterEnum>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filterSig",
                    "defaultValue": "this.todosService.filterSig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "todosService",
                    "defaultValue": "inject(TodosService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "changeFilter",
                    "args": [
                        {
                            "name": "filterName",
                            "type": "FilterEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterName",
                            "type": "FilterEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TodosService } from '../../features/services/todos.service';\r\nimport { FilterEnum } from 'src/app/core/enums/enum';\r\n\r\n@Component({\r\n  selector: 'app-a-filter',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './a-filter.component.html',\r\n})\r\nexport class AFilterComponent {\r\n  @Input() textFilter: string = '';\r\n  @Input() typeFilter: FilterEnum = FilterEnum.all;\r\n  @Output() onChangeFilter = new EventEmitter<FilterEnum>();\r\n\r\n  // dalla versione 14 di angular è posibile utilizzare\r\n  // la funazione Inject per iniettare servizi\r\n  todosService = inject(TodosService);\r\n\r\n  // in questo modo salviamo il valore del signal\r\n  // all'interno di una variabile rendendolo statico\r\n  // se cambia il valore del signal non siamo reattivi\r\n  // filter = this.todosService.filterSig();\r\n  filterSig = this.todosService.filterSig;\r\n\r\n  changeFilter(filterName: FilterEnum) {\r\n    this.onChangeFilter.emit(filterName);\r\n  }\r\n\r\n  get filterEnum() {\r\n    return FilterEnum;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "filterEnum": {
                    "name": "filterEnum",
                    "getSignature": {
                        "name": "filterEnum",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            },
            "templateData": "<a\r\n  href=\"/\"\r\n  [ngClass]=\"{ selected: filterSig() === typeFilter }\"\r\n  (click)=\"changeFilter(typeFilter)\"\r\n>\r\n  {{ textFilter }}</a\r\n>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-05eb993d74c7a93f313f2866feca312c1209c24cf3383e05bf87948a6c8cb40467e9432ca84eb4b19cd5a8a7d3c95a917d1b33de296db56f4cbc56ad7018a792",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'todos-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TodosComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { TodosComponent } from './components/features/todos/todos.component';\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n  standalone: true,\r\n  imports: [TodosComponent],\r\n})\r\nexport class AppComponent {\r\n  title = 'todos-app';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-todos></app-todos>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-5dc18c1ad20acd3f63807d9b913921ec802753f1794f4918b26229b411a2316f54d111ec456449812aa9e3efdd4005593d88c261aaaa93106f967d3a93cd1c53",
            "file": "src/app/components/features/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeCount",
                    "defaultValue": "computed(() => {\n    const todos = this.todosService.todosSig();\n    return todos.filter((todo) => !todo.completed).length;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "filterSig",
                    "defaultValue": "this.todosService.filterSig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "itemsLeftText",
                    "defaultValue": "computed(() => {\n    return `item${this.activeCount() !== 1 ? 's' : ''} left`;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "todosService",
                    "defaultValue": "inject(TodosService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changeFilter",
                    "args": [
                        {
                            "name": "filterName",
                            "type": "FilterEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterName",
                            "type": "FilterEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AFilterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TodosService } from '../services/todos.service';\nimport { FilterEnum } from '../../../core/enums/enum';\nimport { AFilterComponent } from \"../../shared/a-filter/a-filter.component\";\n\n@Component({\n    selector: 'app-footer',\n    standalone: true,\n    templateUrl: './footer.component.html',\n    imports: [CommonModule, AFilterComponent]\n})\nexport class FooterComponent {\n  // dalla versione 14 di angular è posibile utilizzare\n  // la funazione Inject per iniettare servizi\n  todosService = inject(TodosService);\n\n  // in questo modo salviamo il valore del signal\n  // all'interno di una variabile rendendolo statico\n  // se cambia il valore del signal non siamo reattivi\n  // filter = this.todosService.filterSig();\n  filterSig = this.todosService.filterSig;\n\n  itemsLeftText = computed(() => {\n    return `item${this.activeCount() !== 1 ? 's' : ''} left`;\n  });\n\n  activeCount = computed(() => {\n    const todos = this.todosService.todosSig();\n    return todos.filter((todo) => !todo.completed).length;\n  });\n\n  changeFilter(filterName: FilterEnum): void {\n    this.todosService.chageFilter(filterName);\n  }\n\n  get filterEnum() {\n    return FilterEnum;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "filterEnum": {
                    "name": "filterEnum",
                    "getSignature": {
                        "name": "filterEnum",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                }
            },
            "templateData": "<footer *ngIf=\"!todosService.noTodosClass()\" class=\"footer\">\n  <span class=\"todo-count\">\n    <strong>{{ activeCount() }}</strong>\n    {{ itemsLeftText() }}</span\n  >\n  <ul class=\"filters\">\n    <li>\n      <app-a-filter\n        [textFilter]=\"'All'\"\n        [typeFilter]=\"filterEnum.all\"\n        (onChangeFilter)=\"changeFilter($event)\"\n      ></app-a-filter>\n    </li>\n    <li>\n      <app-a-filter\n        [textFilter]=\"'Active'\"\n        [typeFilter]=\"filterEnum.active\"\n      ></app-a-filter>\n    </li>\n    <li>\n      <app-a-filter\n        [textFilter]=\"'Completed'\"\n        [typeFilter]=\"filterEnum.completed\"\n      ></app-a-filter>\n    </li>\n  </ul>\n</footer>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-466a11d480a92036da54ba3d63436e365a34df09e9d382075ce0932c4bee807319bf14516efcfa04a17479aba45779010ff011002bff90d01b898b2c42a6d5f4",
            "file": "src/app/components/features/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "todosService",
                    "defaultValue": "inject(TodosService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "addTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeText",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TodosService } from '../services/todos.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './header.component.html',\n})\nexport class HeaderComponent {\n  // dalla versione 14 di angular è posibile utilizzare\n  // la funazione Inject per iniettare servizi\n  todosService = inject(TodosService);\n  text: string = '';\n\n  changeText(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    this.text = target.value;\n  }\n\n  addTodo(): void {\n    this.todosService.addTodo(this.text);\n    this.text = '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<header class=\"header\">\n  <h1>todos</h1>\n  <input\n    class=\"new-todo\"\n    placeholder=\"What needs to be done?\"\n    autofocus\n    [value]=\"text\"\n    (keyup)=\"changeText($event)\"\n    (keyup.enter)=\"addTodo()\"\n  />\n</header>\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-5eb1ac112a9ea332e86c51b0998f8b52486e23069ab6e15d7ff32f59f9da02970fe10b6ddbeeb528c3262d4bff505b26cbc80ab078265cd8fb94d324cb009b73",
            "file": "src/app/components/features/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editingId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isAllTodosSelected",
                    "defaultValue": "computed(() => {\n    this.todosService.todosSig().every((todo) => todo.completed);\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "todosService",
                    "defaultValue": "inject(TodosService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "visibleTodos",
                    "defaultValue": "computed(() => {\n    const todos = this.todosService.todosSig();\n    const filter = this.todosService.filterSig();\n\n    if (filter === FilterEnum.active) {\n      return todos.filter((todo) => !todo.completed);\n    } else if (filter === FilterEnum.completed) {\n      return todos.filter((todo) => todo.completed);\n    }\n    return todos;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "setEditingId",
                    "args": [
                        {
                            "name": "editingId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "editingId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleAllTodos",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TodoComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TodosService } from '../services/todos.service';\nimport { FilterEnum } from '../../../core/enums/enum';\nimport { TodoComponent } from '../todo/todo.component';\n\n@Component({\n  selector: 'app-main',\n  standalone: true,\n  templateUrl: './main.component.html',\n  imports: [CommonModule, TodoComponent],\n})\nexport class MainComponent {\n  // dalla versione 14 di angular è posibile utilizzare\n  // la funazione Inject per iniettare servizi\n  todosService = inject(TodosService);\n  editingId: string | null = null;\n\n  // grazie a computed possiamo creare un nuovo\n  // signal basato su altri signal\n  visibleTodos = computed(() => {\n    const todos = this.todosService.todosSig();\n    const filter = this.todosService.filterSig();\n\n    if (filter === FilterEnum.active) {\n      return todos.filter((todo) => !todo.completed);\n    } else if (filter === FilterEnum.completed) {\n      return todos.filter((todo) => todo.completed);\n    }\n    return todos;\n  });\n\n  isAllTodosSelected = computed(() => {\n    this.todosService.todosSig().every((todo) => todo.completed);\n  });\n\n  setEditingId(editingId: string | null) {\n    this.editingId = editingId;\n  }\n\n  toggleAllTodos(event: Event): void {\n    debugger\n    this.todosService.toggleAllTodos(\n      (event.target as HTMLInputElement).checked\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<section class=\"main\" [ngClass]=\"{ hidden: todosService.noTodosClass() }\">\n  <input\n    id=\"toggle-all\"\n    class=\"toggle-all\"\n    type=\"checkbox\"\n    [checked]=\"isAllTodosSelected()\"\n    (change)=\"toggleAllTodos($event)\"\n  />\n  <label for=\"toggle-all\">Mark all as completed</label>\n  <ul class=\"todo-list\">\n    <app-todo\n      *ngFor=\"let todo of visibleTodos()\"\n      [todo]=\"todo\"\n      [isEditing]=\"editingId === todo.id\"\n      (setEditingId)=\"setEditingId($event)\"\n    ></app-todo>\n  </ul>\n</section>\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-e76e2b0a313bd6ee516bbebea0743a78f2dcce35def11121048acd4eb80c4caa9d2049924642510b42076fcc8010c0c7b206a06afc5a2d447dab4c9937607657",
            "file": "src/app/components/shared/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-item {{ task?.state }}\">\n  <label\n    [attr.aria-label]=\"'archiveTask-' + task?.id\"\n    for=\"checked-{{ task?.id }}\"\n    class=\"checkbox\"\n  >\n    <input\n      type=\"checkbox\"\n      disabled=\"true\"\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\n      name=\"checked-{{ task?.id }}\"\n      id=\"checked-{{ task?.id }}\"\n    />\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task?.id)\"></span>\n  </label>\n  <label\n    [attr.aria-label]=\"task?.title + ''\"\n    for=\"title-{{ task?.id }}\"\n    class=\"title\"\n  >\n    <input\n      type=\"text\"\n      [value]=\"task?.title\"\n      readonly=\"true\"\n      id=\"title-{{ task?.id }}\"\n      name=\"title-{{ task?.id }}\"\n      placeholder=\"Input title\"\n    />\n  </label>\n  <button\n    *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\n    class=\"pin-button\"\n    [attr.aria-label]=\"'pinTask-' + task?.id\"\n    (click)=\"onPin(task?.id)\"\n  >\n    <span class=\"icon-star\"></span>\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe shape of the task object\n",
                    "description": "<p>The shape of the task object</p>\n",
                    "line": 52,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Task } from 'src/app/core/models/task.model';\n\n@Component({\n  selector: 'app-task',\n  template: `\n    <div class=\"list-item {{ task?.state }}\">\n      <label\n        [attr.aria-label]=\"'archiveTask-' + task?.id\"\n        for=\"checked-{{ task?.id }}\"\n        class=\"checkbox\"\n      >\n        <input\n          type=\"checkbox\"\n          disabled=\"true\"\n          [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\n          name=\"checked-{{ task?.id }}\"\n          id=\"checked-{{ task?.id }}\"\n        />\n        <span class=\"checkbox-custom\" (click)=\"onArchive(task?.id)\"></span>\n      </label>\n      <label\n        [attr.aria-label]=\"task?.title + ''\"\n        for=\"title-{{ task?.id }}\"\n        class=\"title\"\n      >\n        <input\n          type=\"text\"\n          [value]=\"task?.title\"\n          readonly=\"true\"\n          id=\"title-{{ task?.id }}\"\n          name=\"title-{{ task?.id }}\"\n          placeholder=\"Input title\"\n        />\n      </label>\n      <button\n        *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\n        class=\"pin-button\"\n        [attr.aria-label]=\"'pinTask-' + task?.id\"\n        (click)=\"onPin(task?.id)\"\n      >\n        <span class=\"icon-star\"></span>\n      </button>\n    </div>\n  `,\n})\nexport default class TaskComponent {\n  /**\n   * The shape of the task object\n  */\n  @Input() task?: Task;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onPinTask = new EventEmitter<Event>();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onArchiveTask = new EventEmitter<Event>();\n\n  /**\n   * @ignore\n   * Component method to trigger the onPin event\n   * @param id string\n   */\n  onPin(id: any) {\n    this.onPinTask.emit(id);\n  }\n  /**\n   * @ignore\n   * Component method to trigger the onArchive event\n   * @param id string\n   */\n  onArchive(id: any) {\n    this.onArchiveTask.emit(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TodoComponent",
            "id": "component-TodoComponent-d54a1eed2b16d93b49f1a38acee67f54d77a6151d9e5ee56c1efefd51f1487201a72c06d4df21f7abb7a5d1f645eea08b7a0f0fb5cd6532073059b6706a0bf45",
            "file": "src/app/components/features/todo/todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./todo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "isEditing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 25,
                    "type": "TodosInterface",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "setEditingId",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<string | null>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "editingText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "textInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textInput'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "todosService",
                    "defaultValue": "inject(TodosService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "changeText",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTodoInEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChange,\n  SimpleChanges,\n  ViewChild,\n  inject,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TodosInterface } from '../../../core/models/todos.model';\nimport { TodosService } from '../services/todos.service';\n\n@Component({\n  selector: 'app-todo',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './todo.component.html',\n})\nexport class TodoComponent implements OnInit, OnChanges {\n  @Input({ required: true }) todo!: TodosInterface;\n  @Input({ required: true }) isEditing!: boolean;\n  @Output() setEditingId: EventEmitter<string | null> = new EventEmitter();\n  @ViewChild('textInput') textInput?: ElementRef;\n\n  // dalla versione 14 di angular è posibile utilizzare\n  // la funazione Inject per iniettare servizi\n  todosService = inject(TodosService);\n\n  editingText: string = '';\n\n  ngOnInit(): void {\n    this.editingText = this.todo.title;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['isEditing'].currentValue) {\n      setTimeout(() => {\n        this.textInput?.nativeElement.focus();\n      }, 0);\n    }\n  }\n\n  changeText(event: Event): void {\n    const value = (event.target as HTMLInputElement).value;\n    this.editingText = value;\n  }\n\n  changeTodo(): void {\n    this.todosService.changeTodo(this.todo.id, this.editingText);\n    this.setEditingId.emit(null);\n  }\n\n  setTodoInEditMode(): void {\n    this.setEditingId.emit(this.todo.id);\n  }\n\n  removeTodo() {\n    this.todosService.removeTodo(this.todo.id);\n  }\n\n  toggleTodo() {\n    this.todosService.toggleTodo(this.todo.id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<li [ngClass]=\"{ editing: isEditing, completed: todo.completed }\">\n  <div class=\"view\">\n    <input\n      class=\"toggle\"\n      type=\"checkbox\"\n      [checked]=\"todo.completed\"\n      (change)=\"toggleTodo()\"\n    />\n    <label (dblclick)=\"setTodoInEditMode()\">{{ todo.title }}</label>\n    <button class=\"destroy\" (click)=\"removeTodo()\"></button>\n  </div>\n  <ng-container *ngIf=\"isEditing\">\n    <input\n      class=\"edit\"\n      #textInput\n      [value]=\"editingText\"\n      (keyup)=\"changeText($event)\"\n      (keyup.enter)=\"changeTodo()\"\n    />\n  </ng-container>\n</li>\n"
        },
        {
            "name": "TodosComponent",
            "id": "component-TodosComponent-748765164f2f53428bd186a0ca254c3786ba4861336dbc860c40f1e9d308e0732967137f3ba7427f7c8fc52f5d0c8c19910622bc1200d629efeea407d3241cbd",
            "file": "src/app/components/features/todos/todos.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todos",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./todos.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "MainComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from '../header/header.component';\nimport { MainComponent } from '../main/main.component';\nimport { FooterComponent } from '../footer/footer.component';\n\n@Component({\n  selector: 'app-todos',\n  standalone: true,\n  imports: [\n    CommonModule,\n    HeaderComponent,\n    MainComponent,\n    FooterComponent,\n  ],\n  templateUrl: './todos.component.html',\n})\nexport class TodosComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"app-wrapper\">\n  <div class=\"todoapp\">\n    <app-header></app-header>\n    <app-main></app-main>\n    <app-footer></app-footer>\n  </div>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/a-filter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onChangeFilter: action('onChangeFilter'),\r\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    task: {\r\n      ...Default.args?.task,\r\n      state: 'TASK_ARCHIVED',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/a-filter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    textFilter: '1',\r\n    typeFilter: FilterEnum.all\r\n    // task: {\r\n    //   id: '1',\r\n    //   title: 'Test Task',\r\n    //   state: 'FILTER_ALL',\r\n    // },\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    task: {\r\n      id: '1',\r\n      title: 'Test Task',\r\n      state: 'TASK_INBOX',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TaskComponent>",
                "defaultValue": "{\r\n  title: 'Task',\r\n  component: TaskComponent,\r\n  excludeStories: /.*Data$/,\r\n  tags: ['autodocs'],\r\n  render: (args: TaskComponent) => ({\r\n    props: {\r\n      ...args,\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "meta1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/a-filter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AFilterComponent>",
                "defaultValue": "{\r\n  title: 'a-filter',\r\n  component: AFilterComponent,\r\n  excludeStories: /.*Data$/,\r\n  tags: ['autodocs'],\r\n  render: (args: AFilterComponent) => ({\r\n    props: {\r\n      ...args,\r\n      onChangeFilter: actionsData.onChangeFilter,\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    task: {\r\n      ...Default.args?.task,\r\n      state: 'TASK_PINNED',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AFilterComponent>",
                "file": "src/stories/a-filter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TaskComponent>",
                "file": "src/stories/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [
            {
                "name": "FilterEnum",
                "childs": [
                    {
                        "name": "all",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "all"
                    },
                    {
                        "name": "active",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "active"
                    },
                    {
                        "name": "completed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "completed"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/enum.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/a-filter.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/a-filter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onChangeFilter: action('onChangeFilter'),\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/a-filter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    textFilter: '1',\r\n    typeFilter: FilterEnum.all\r\n    // task: {\r\n    //   id: '1',\r\n    //   title: 'Test Task',\r\n    //   state: 'FILTER_ALL',\r\n    // },\r\n  },\r\n}"
                },
                {
                    "name": "meta1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/a-filter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AFilterComponent>",
                    "defaultValue": "{\r\n  title: 'a-filter',\r\n  component: AFilterComponent,\r\n  excludeStories: /.*Data$/,\r\n  tags: ['autodocs'],\r\n  render: (args: AFilterComponent) => ({\r\n    props: {\r\n      ...args,\r\n      onChangeFilter: actionsData.onChangeFilter,\r\n    },\r\n  }),\r\n}"
                }
            ],
            "src/stories/task.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    task: {\r\n      ...Default.args?.task,\r\n      state: 'TASK_ARCHIVED',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    task: {\r\n      id: '1',\r\n      title: 'Test Task',\r\n      state: 'TASK_INBOX',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TaskComponent>",
                    "defaultValue": "{\r\n  title: 'Task',\r\n  component: TaskComponent,\r\n  excludeStories: /.*Data$/,\r\n  tags: ['autodocs'],\r\n  render: (args: TaskComponent) => ({\r\n    props: {\r\n      ...args,\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    task: {\r\n      ...Default.args?.task,\r\n      state: 'TASK_PINNED',\r\n    },\r\n  },\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/enums/enum.ts": [
                {
                    "name": "FilterEnum",
                    "childs": [
                        {
                            "name": "all",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "all"
                        },
                        {
                            "name": "active",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "active"
                        },
                        {
                            "name": "completed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "completed"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/a-filter.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AFilterComponent>",
                    "file": "src/stories/a-filter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/stories/task.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TaskComponent>",
                    "file": "src/stories/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/features/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/features/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/features/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/features/services/todos.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodosService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/features/todo/todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/features/todos/todos.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodosComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/a-filter/a-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/a-filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/todos.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodosInterface",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/a-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/a-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/a-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}